generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String         @unique
  emailVerified        DateTime?
  image                String?
  // Nuevo sistema de trial + subscription
  trialStartDate       DateTime?
  trialEndDate         DateTime?
  subscriptionStartDate DateTime?
  subscriptionEndDate  DateTime?
  isFirstYear          Boolean        @default(true)
  status               UserStatus     @default(TRIAL)
  stripeCustomerId     String?        @unique
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  accounts             Account[]
  cards                Card[]
  presentations        Presentation[]
  sessions             Session[]
  cvs                  SmartCV[]
  subscription         Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id                          String   @id @default(cuid())
  title                       String
  name                        String
  profession                  String
  about                       String?
  email                       String?
  phone                       String?
  website                     String?
  linkedin                    String?
  twitter                     String?
  instagram                   String?
  photoUrl                    String?
  isActive                    Boolean  @default(true)
  views                       Int      @default(0)
  clicks                      Int      @default(0)
  userId                      String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  buttonNormalBackgroundColor String   @default("#1F1F1F")
  buttonSecondaryColor        String   @default("#00F6FF")
  buttonSecondaryHoverColor   String   @default("#00D1DB")
  cardBackgroundColor         String   @default("#1F1F1F")
  cardTextColor               String   @default("#EAEAEA")
  enableAIPalette             Boolean  @default(false)
  enableBackgroundPatterns    Boolean  @default(false)
  enableGlassmorphism         Boolean  @default(false)
  enableHoverEffect           Boolean  @default(false)
  enableSubtleAnimations      Boolean  @default(false)
  pageBackgroundColor         String   @default("#121212")
  // Nuevos campos para efectos visuales (Agosto 2025)
  fontFamily                  String   @default("Inter")
  enableParticles             Boolean  @default(false)
  particleType                String   @default("floating")
  particleDensity             Int      @default(3)
  particleCount               Int      @default(50)
  template                    String   @default("modern")
  // Nuevo Sistema Profesional v4.0 (Septiembre 2025)
  enableProfessionalEffects   Boolean  @default(false)
  professionalPersonality     String   @default("trustworthy")
  effectIntensity             String   @default("balanced")
  // Campos para efectos de ambiente (Agosto 2025)
  enableAnimatedGradient      Boolean  @default(false)
  animatedGradientType        String   @default("aurora")
  animatedGradientSpeed       Int      @default(3)
  animatedGradientIntensity   Int      @default(3)
  animatedGradientOpacity     Float    @default(0.5)
  enableFloatingShapes        Boolean  @default(false)
  floatingShapesType          String   @default("geometric")
  floatingShapesCount         Int      @default(3)
  floatingShapesSpeed         Int      @default(3)
  ambientIntensity            Int      @default(3)
  ambientOpacity              Float    @default(0.5)
  customUrl                   String?  @unique
  appointmentLink             String?
  facebook                    String?
  location                    String?
  professionalDetails         String?
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  stripeSubscriptionId String   @unique
  stripePriceId        String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  // Nuevos campos para primer año vs renovación
  isFirstYear          Boolean  @default(true)
  price                Decimal
  originalPrice        Decimal  // Para tracking de primer año vs renovación
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SmartCV {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   Json
  template  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Presentation {
  id            String   @id @default(cuid())
  title         String
  description   String?
  content       Json     // Contenido completo de la presentación generada por IA
  slides        Json?    // Mantener compatibilidad con slides legacy
  theme         Json?    // Tema aplicado
  settings      Json?    // Configuraciones de presentación
  metadata      Json?    // Metadatos de generación AI y calidad
  customUrl     String?  @unique
  isPublic      Boolean  @default(false)
  views         Int      @default(0)
  uniqueViews   Int      @default(0)
  averageTime   Int      @default(0)
  analyticsData Json?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
  @@index([createdAt])
}

// Nueva tabla para logging de actividad de usuarios
model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String   // Tipo de acción realizada
  details   Json?    // Detalles específicos de la acción
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

// Tabla para base de conocimientos RAG
model KnowledgeBase {
  id        String   @id @default(cuid())
  content   String   // Contenido del documento
  embedding Float[]  // Vector embedding para búsqueda semántica
  metadata  Json     // Metadatos: tipo, topic, fuente, etc.
  createdAt DateTime @default(now())

  @@index([createdAt])
}

enum UserStatus {
  TRIAL       // 7 días de prueba
  ACTIVE      // Suscripción activa
  EXPIRED     // Suscripción vencida
}
